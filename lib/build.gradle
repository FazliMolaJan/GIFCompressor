apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
    libVersion = '0.1.0'
    libGroup = 'com.otaliastudios.gif'
    libName = 'GIFCompressor'
    libDescription = 'Compresses your GIFs to lightweight MP4 using hardware accelerated encoders.'
    libArtifactId = 'compressor'
    githubUrl = "https://github.com/natario1/${libName}"
    githubGit = "https://github.com/natario1/${libName}.git"
    libLicenseName = 'MIT License'
    libLicenseUrl = 'http://www.opensource.org/licenses/mit-license.php'
}

// Required by bintray
version = libVersion
group = libGroup
archivesBaseName = libArtifactId

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName libVersion
    }
}

dependencies {
    api "com.github.bumptech.glide:glide:4.9.0"
    api "com.otaliastudios.opengl:egloo:0.2.3"
    api "androidx.annotation:annotation:1.1.0"
}

install.repositories.mavenInstaller.pom.project {
    name libName
    description libDescription
    url githubUrl
    groupId libGroup
    artifactId libArtifactId
    version libVersion
    packaging 'aar'

    scm {
        connection githubGit
        url githubUrl
    }

    licenses {
        license {
            name libLicenseName
            url libLicenseUrl
        }
    }

    developers {
        developer {
            id = 'natario'
            name 'Mattia Iavarione'
        }
    }
}

def bintrayUser
def bintrayKey
def hasBintray = false
if (System.getenv('TRAVIS') == 'true') {
    if (System.getenv('TRAVIS_SECURE_ENV_VARS') == 'true') {
        bintrayUser = System.getenv("BINTRAY_USER")
        bintrayKey = System.getenv("BINTRAY_KEY")
        hasBintray = true
    }
} else {
    Properties props = new Properties()
    props.load(project.rootProject.file('local.properties').newDataInputStream())
    bintrayUser = props.getProperty('bintray.user')
    bintrayKey = props.get('bintray.key')
    hasBintray = true
}

if (hasBintray) {
    bintray {
        // https://github.com/bintray/gradle-bintray-plugin
        user = bintrayUser
        key = bintrayKey
        configurations = ['archives']
        publish = true
        override = true
        pkg {
            repo = 'android'
            name = libName
            licenses = [libLicenseName]
            vcsUrl = githubGit
            desc = libDescription
            version {
                name = libVersion
                desc = libName + ' v' + libVersion
                released = new Date()
                vcsTag = 'v' + libVersion
            }
        }
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += project.files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    project.android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            classpath += files(variant.javaCompile.classpath)
        }
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/internal/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}